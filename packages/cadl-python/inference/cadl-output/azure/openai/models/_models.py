# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, List, Mapping, Optional, overload

from .. import _model_base
from .._model_base import rest_field

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Embedding(_model_base.Model):
    """Embedding.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar object: Required. Default value is "embedding".
    :vartype object: str
    :ivar embedding: Required.
    :vartype embedding: list[float]
    :ivar index: Required.
    :vartype index: int
    """

    object: Literal["embedding"] = rest_field()
    """Required. Default value is \"embedding\"."""
    embedding: List[float] = rest_field()
    """Required. """
    index: int = rest_field()
    """Required. """

    @overload
    def __init__(
        self,
        *,
        embedding: List[float],
        index: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.object: Literal["embedding"] = "embedding"


class Embeddings(_model_base.Model):
    """Embeddings.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar object: Required. Default value is "list".
    :vartype object: str
    :ivar data: Required.
    :vartype data: list[~azure.openai.models.Embedding]
    """

    object: Literal["list"] = rest_field()
    """Required. Default value is \"list\"."""
    data: List["_models.Embedding"] = rest_field()
    """Required. """

    @overload
    def __init__(
        self,
        *,
        data: List["_models.Embedding"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.object: Literal["list"] = "list"


class EmbeddingsRequest(_model_base.Model):
    """EmbeddingsRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar user: The ID of the end-user, for use in tracking and rate-limiting.
    :vartype user: str
    :ivar input_type: input type of embedding search to use.
    :vartype input_type: str
    :ivar input: An input to embed, encoded as a string, a list of strings, or a list of token
     lists. Required.
    :vartype input: str
    """

    user: Optional[str] = rest_field()
    """The ID of the end-user, for use in tracking and rate-limiting. """
    input_type: Optional[str] = rest_field()
    """input type of embedding search to use. """
    input: str = rest_field()
    """An input to embed, encoded as a string, a list of strings, or a list of token
lists. Required. """

    @overload
    def __init__(
        self,
        *,
        input: str,
        user: Optional[str] = None,
        input_type: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
