# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Choice(_model_base.Model):
    """Choice model within completion response.

    :ivar text: Generated text for given completion prompt.
    :vartype text: str
    :ivar index: Index.
    :vartype index: int
    :ivar logprobs: Log Prob Model.
    :vartype logprobs: ~azure.openai.models.CompletionsLogProbsModel
    :ivar finish_reason: Reason for finishing.
    :vartype finish_reason: str
    """

    text: Optional[str] = rest_field()
    """Generated text for given completion prompt. """
    index: Optional[int] = rest_field()
    """Index. """
    logprobs: Optional["_models.CompletionsLogProbsModel"] = rest_field()
    """Log Prob Model. """
    finish_reason: Optional[str] = rest_field()
    """Reason for finishing. """

    @overload
    def __init__(
        self,
        *,
        text: Optional[str] = None,
        index: Optional[int] = None,
        logprobs: Optional["_models.CompletionsLogProbsModel"] = None,
        finish_reason: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Completion(_model_base.Model):
    """Completion.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Id for completion response.
    :vartype id: str
    :ivar object: Object for completion response. Required. Default value is "text_completion".
    :vartype object: str
    :ivar created: Created time for completion response.
    :vartype created: int
    :ivar model: Model used for completion response.
    :vartype model: str
    :ivar choices: Array of choices returned containing text completions to prompts sent.
    :vartype choices: list[~azure.openai.models.Choice]
    """

    id: Optional[str] = rest_field()
    """Id for completion response. """
    object: Literal["text_completion"] = rest_field()
    """Object for completion response. Required. Default value is \"text_completion\"."""
    created: Optional[int] = rest_field()
    """Created time for completion response. """
    model: Optional[str] = rest_field()
    """Model used for completion response. """
    choices: Optional[List["_models.Choice"]] = rest_field()
    """Array of choices returned containing text completions to prompts sent. """

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        created: Optional[int] = None,
        model: Optional[str] = None,
        choices: Optional[List["_models.Choice"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.object: Literal["text_completion"] = "text_completion"


class CompletionsLogProbsModel(_model_base.Model):
    """LogProbs model within completion choice.

    :ivar tokens: Tokens.
    :vartype tokens: list[str]
    :ivar token_logprobs: LogProbs of Tokens.
    :vartype token_logprobs: list[float]
    :ivar top_logprobs: Top LogProbs.
    :vartype top_logprobs: list[dict[str, float]]
    :ivar text_offset: Text offset.
    :vartype text_offset: list[int]
    """

    tokens: Optional[List[str]] = rest_field()
    """Tokens. """
    token_logprobs: Optional[List[float]] = rest_field()
    """LogProbs of Tokens. """
    top_logprobs: Optional[List[Dict[str, float]]] = rest_field()
    """Top LogProbs. """
    text_offset: Optional[List[int]] = rest_field()
    """Text offset. """

    @overload
    def __init__(
        self,
        *,
        tokens: Optional[List[str]] = None,
        token_logprobs: Optional[List[float]] = None,
        top_logprobs: Optional[List[Dict[str, float]]] = None,
        text_offset: Optional[List[int]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Embedding(_model_base.Model):
    """Embedding.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar object: Required. Default value is "embedding".
    :vartype object: str
    :ivar embedding: Required.
    :vartype embedding: list[float]
    :ivar index: Required.
    :vartype index: int
    """

    object: Literal["embedding"] = rest_field()
    """Required. Default value is \"embedding\"."""
    embedding: List[float] = rest_field()
    """Required. """
    index: int = rest_field()
    """Required. """

    @overload
    def __init__(
        self,
        *,
        embedding: List[float],
        index: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.object: Literal["embedding"] = "embedding"


class Embeddings(_model_base.Model):
    """Embeddings.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar object: Required. Default value is "list".
    :vartype object: str
    :ivar data: Required.
    :vartype data: list[~azure.openai.models.Embedding]
    """

    object: Literal["list"] = rest_field()
    """Required. Default value is \"list\"."""
    data: List["_models.Embedding"] = rest_field()
    """Required. """

    @overload
    def __init__(
        self,
        *,
        data: List["_models.Embedding"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.object: Literal["list"] = "list"
