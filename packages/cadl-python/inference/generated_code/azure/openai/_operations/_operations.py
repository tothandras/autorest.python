# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import AzureJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import EmbeddingClientMixinABC, _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_embedding_embeddings_request(deployment_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2022-06-01"] = kwargs.pop("api_version", _params.pop("api-version", "2022-06-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/deployments/{deploymentId}/embeddings"
    path_format_arguments = {
        "deploymentId": _SERIALIZER.url("deployment_id", deployment_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class EmbeddingClientOperationsMixin(EmbeddingClientMixinABC):
    @overload
    def embeddings(
        self, deployment_id: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Embeddings:
        """Return the embeddings for a given prompt.

        :param deployment_id: deployment id of the deployed model. Required.
        :type deployment_id: str
        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Embeddings. The Embeddings is compatible with MutableMapping
        :rtype: ~azure.openai.models.Embeddings
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "input": "str",  # An input to embed, encoded as a string, a list of strings,
                      or a list of token"nlists. Required. Is one of the following types: string, list,
                      list, list
                    "input_type": "str",  # Optional. input type of embedding search to use.
                    "model": "str",  # Optional. ID of the model to use.
                    "user": "str"  # Optional. The ID of the end-user, for use in tracking and
                      rate-limiting.
                }
        """

    @overload
    def embeddings(
        self,
        deployment_id: str,
        *,
        input: Union[str, List[str], List[int], List[List[int]]],
        content_type: str = "application/json",
        user: Optional[str] = None,
        input_type: Optional[str] = None,
        model: Optional[str] = None,
        **kwargs: Any
    ) -> _models.Embeddings:
        """Return the embeddings for a given prompt.

        :param deployment_id: deployment id of the deployed model. Required.
        :type deployment_id: str
        :keyword input: An input to embed, encoded as a string, a list of strings, or a list of token
         lists. Is one of the following types: string, list, list, list Required.
        :paramtype input: str or list[str] or list[int] or list[list[int]]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword user: The ID of the end-user, for use in tracking and rate-limiting. Default value is
         None.
        :paramtype user: str
        :keyword input_type: input type of embedding search to use. Default value is None.
        :paramtype input_type: str
        :keyword model: ID of the model to use. Default value is None.
        :paramtype model: str
        :return: Embeddings. The Embeddings is compatible with MutableMapping
        :rtype: ~azure.openai.models.Embeddings
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def embeddings(
        self, deployment_id: str, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Embeddings:
        """Return the embeddings for a given prompt.

        :param deployment_id: deployment id of the deployed model. Required.
        :type deployment_id: str
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Embeddings. The Embeddings is compatible with MutableMapping
        :rtype: ~azure.openai.models.Embeddings
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def embeddings(
        self,
        deployment_id: str,
        body: Union[JSON, IO],
        *,
        input: Union[str, List[str], List[int], List[List[int]]],
        user: Optional[str] = None,
        input_type: Optional[str] = None,
        model: Optional[str] = None,
        **kwargs: Any
    ) -> _models.Embeddings:
        """Return the embeddings for a given prompt.

        :param deployment_id: deployment id of the deployed model. Required.
        :type deployment_id: str
        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword input: An input to embed, encoded as a string, a list of strings, or a list of token
         lists. Is one of the following types: string, list, list, list Required.
        :paramtype input: str or list[str] or list[int] or list[list[int]]
        :keyword user: The ID of the end-user, for use in tracking and rate-limiting. Default value is
         None.
        :paramtype user: str
        :keyword input_type: input type of embedding search to use. Default value is None.
        :paramtype input_type: str
        :keyword model: ID of the model to use. Default value is None.
        :paramtype model: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: Embeddings. The Embeddings is compatible with MutableMapping
        :rtype: ~azure.openai.models.Embeddings
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Embeddings] = kwargs.pop("cls", None)

        if body is None:
            body = {"input": input, "input_type": input_type, "model": model, "user": user}
        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder)  # type: ignore

        request = build_embedding_embeddings_request(
            deployment_id=deployment_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.Embeddings, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
