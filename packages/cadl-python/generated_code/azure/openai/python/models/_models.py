# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Capabilities(_model_base.Model):
    """The capabilities of a base or fine tune model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar fine_tune: A value indicating whether a model can be used for fine tuning.
    :vartype fine_tune: bool
    :ivar inference: A value indicating whether a model can be deployed.
    :vartype inference: bool
    :ivar completion: A value indicating whether a model supports completion.
    :vartype completion: bool
    :ivar embeddings: A value indicating whether a model supports embeddings.
    :vartype embeddings: bool
    :ivar scale_types: The supported scale types for deployments of this model.
    :vartype scale_types: list[str]
    """

    fine_tune: Optional[bool] = rest_field(readonly=True)
    """A value indicating whether a model can be used for fine tuning. """
    inference: Optional[bool] = rest_field(readonly=True)
    """A value indicating whether a model can be deployed. """
    completion: Optional[bool] = rest_field(readonly=True)
    """A value indicating whether a model supports completion. """
    embeddings: Optional[bool] = rest_field(readonly=True)
    """A value indicating whether a model supports embeddings. """
    scale_types: Optional[List[str]] = rest_field(readonly=True)
    """The supported scale types for deployments of this model. """


class CustomResponseFields(_model_base.Model):
    """CustomResponseFields.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar object: Defines the type of an object.
    :vartype object: str
    :ivar status: The state of a job or item. Known values are: "notRunning", "running",
     "succeeded", "canceled", "failed", and "deleted".
    :vartype status: str or ~azure.openai.python.models.State
    :ivar created_at: A timestamp when this job or item was created (in unix epochs).
    :vartype created_at: int
    :ivar updated_at: A timestamp when this job or item was modified last (in unix epochs).
    :vartype updated_at: int
    :ivar id: The identity of this item. Required.
    :vartype id: str
    :ivar bytes: The size of this file when available (can be null). File sizes larger than
     2^53-1 are not supported to ensure compatibility
     with JavaScript integers.
    :vartype bytes: int
    :ivar purpose: The intended purpose of the uploaded documents. Use "fine-tune" for
     fine-tuning. This allows us to validate the format of the uploaded file. Required.
    :vartype purpose: str
    :ivar filename: The name of the file. Required.
    :vartype filename: str
    """

    object: Optional[str] = rest_field(readonly=True)
    """Defines the type of an object. """
    status: Optional[Union[str, "_models.State"]] = rest_field(readonly=True)
    """The state of a job or item. Known values are: \"notRunning\", \"running\", \"succeeded\", \"canceled\", \"failed\", and \"deleted\"."""
    created_at: Optional[int] = rest_field(readonly=True)
    """A timestamp when this job or item was created (in unix epochs). """
    updated_at: Optional[int] = rest_field(readonly=True)
    """A timestamp when this job or item was modified last (in unix epochs). """
    id: str = rest_field(readonly=True)
    """The identity of this item. Required. """
    bytes: Optional[int] = rest_field(readonly=True)
    """The size of this file when available (can be null). File sizes larger than
2^53-1 are not supported to ensure compatibility
with JavaScript integers. """
    purpose: str = rest_field()
    """The intended purpose of the uploaded documents. Use \"fine-tune\" for
fine-tuning. This allows us to validate the format of the uploaded file. Required. """
    filename: str = rest_field()
    """The name of the file. Required. """

    @overload
    def __init__(
        self,
        *,
        purpose: str,
        filename: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Deployment(_model_base.Model):
    """Deployments manage the reserved quota for Azure OpenAI models and make them
    available for inference requests.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar object: Defines the type of an object.
    :vartype object: str
    :ivar status: The state of a job or item. Required. Known values are: "notRunning", "running",
     "succeeded", "canceled", "failed", and "deleted".
    :vartype status: str or ~azure.openai.python.models.State
    :ivar created_at: A timestamp when this job or item was created (in unix epochs). Required.
    :vartype created_at: int
    :ivar updated_at: A timestamp when this job or item was modified last (in unix epochs).
     Required.
    :vartype updated_at: int
    :ivar id: The identifier of the deployment. Required.
    :vartype id: str
    :ivar model: The OpenAI model to deploy. Can be a base model or a fine tune. Required.
    :vartype model: str
    :ivar owner: The owner of this deployment. For Azure OpenAI only "organization-owner" is
     supported.
    :vartype owner: str
    :ivar scale_settings: The scale settings of a deployment. It defines the modes for scaling and
     the
     reserved capacity. Required.
    :vartype scale_settings: ~azure.openai.python.models.ScaleSettings
    """

    object: Optional[str] = rest_field(readonly=True)
    """Defines the type of an object. """
    status: Union[str, "_models.State"] = rest_field(readonly=True)
    """The state of a job or item. Required. Known values are: \"notRunning\", \"running\", \"succeeded\", \"canceled\", \"failed\", and \"deleted\"."""
    created_at: int = rest_field(readonly=True)
    """A timestamp when this job or item was created (in unix epochs). Required. """
    updated_at: int = rest_field(readonly=True)
    """A timestamp when this job or item was modified last (in unix epochs). Required. """
    id: str = rest_field(readonly=True)
    """The identifier of the deployment. Required. """
    model: str = rest_field()
    """The OpenAI model to deploy. Can be a base model or a fine tune. Required. """
    owner: Optional[str] = rest_field(readonly=True)
    """The owner of this deployment. For Azure OpenAI only \"organization-owner\" is
supported. """
    scale_settings: "_models.ScaleSettings" = rest_field()
    """The scale settings of a deployment. It defines the modes for scaling and the
reserved capacity. Required. """

    @overload
    def __init__(
        self,
        *,
        model: str,
        scale_settings: "_models.ScaleSettings",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeploymentList(_model_base.Model):
    """DeploymentList.

    :ivar object: Defines the type of this object. Default value is "deployment".
    :vartype object: str
    :ivar data: The list of Deployments.
    :vartype data: list[~azure.openai.python.models.Deployment]
    """

    object: Optional[Literal["deployment"]] = rest_field()
    """Defines the type of this object. Default value is \"deployment\"."""
    data: Optional[List["_models.Deployment"]] = rest_field()
    """The list of Deployments. """

    @overload
    def __init__(
        self,
        *,
        object: Optional[Literal["deployment"]] = None,
        data: Optional[List["_models.Deployment"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Deprecation(_model_base.Model):
    """Defines the dates of deprecation for the different use cases of a
    model.
    Usually base models support 1 year of fine tuning after creation.
    Inference is typically supported 2 years after creation of base or
    fine tuned
    models. The exact dates are specified in the properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar fine_tune_end_date: The end date of fine tune support of this model. Will be ``null`` for
     fine tune
     models.
    :vartype fine_tune_end_date: int
    :ivar inference: The end date of inference support of this model.
    :vartype inference: int
    """

    fine_tune_end_date: Optional[int] = rest_field(readonly=True)
    """The end date of fine tune support of this model. Will be ``null`` for fine tune
models. """
    inference: Optional[int] = rest_field(readonly=True)
    """The end date of inference support of this model. """


class Event(_model_base.Model):
    """Event.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar object: Defines the type of an object.
    :vartype object: str
    :ivar created_at: A timestamp when this event was created (in unix epochs).
    :vartype created_at: int
    :ivar level: The verbosity level of an event. Known values are: "info", "warning", and "error".
    :vartype level: str or ~azure.openai.python.models.LogLevel
    :ivar message: The message describing the event. This can be a change of state, e.g.,
     enqueued, started, failed or completed, or other events like uploaded results.
    :vartype message: str
    """

    object: Optional[str] = rest_field(readonly=True)
    """Defines the type of an object. """
    created_at: Optional[int] = rest_field(readonly=True)
    """A timestamp when this event was created (in unix epochs). """
    level: Optional[Union[str, "_models.LogLevel"]] = rest_field(readonly=True)
    """The verbosity level of an event. Known values are: \"info\", \"warning\", and \"error\"."""
    message: Optional[str] = rest_field(readonly=True)
    """The message describing the event. This can be a change of state, e.g.,
enqueued, started, failed or completed, or other events like uploaded results. """


class EventList(_model_base.Model):
    """EventList.

    :ivar object: Defines the type of this object.
    :vartype object: str
    :ivar data: The list of Events.
    :vartype data: list[~azure.openai.python.models.Event]
    """

    object: Optional[str] = rest_field()
    """Defines the type of this object. """
    data: Optional[List["_models.Event"]] = rest_field()
    """The list of Events. """

    @overload
    def __init__(
        self,
        *,
        object: Optional[str] = None,
        data: Optional[List["_models.Event"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class File(_model_base.Model):
    """A file is a document usable for training and validation. It can also be a
    service generated document with result details.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar object: Defines the type of an object.
    :vartype object: str
    :ivar status: The state of a job or item. Known values are: "notRunning", "running",
     "succeeded", "canceled", "failed", and "deleted".
    :vartype status: str or ~azure.openai.python.models.State
    :ivar created_at: A timestamp when this job or item was created (in unix epochs).
    :vartype created_at: int
    :ivar updated_at: A timestamp when this job or item was modified last (in unix epochs).
    :vartype updated_at: int
    :ivar id: The identity of this item. Required.
    :vartype id: str
    :ivar bytes: The size of this file when available (can be null). File sizes larger than
     2^53-1 are not supported to ensure compatibility
     with JavaScript integers.
    :vartype bytes: int
    :ivar purpose: The intended purpose of the uploaded documents. Use "fine-tune" for
     fine-tuning. This allows us to validate the format of the uploaded file. Required.
    :vartype purpose: str
    :ivar filename: The name of the file. Required.
    :vartype filename: str
    """

    object: Optional[str] = rest_field(readonly=True)
    """Defines the type of an object. """
    status: Optional[Union[str, "_models.State"]] = rest_field(readonly=True)
    """The state of a job or item. Known values are: \"notRunning\", \"running\", \"succeeded\", \"canceled\", \"failed\", and \"deleted\"."""
    created_at: Optional[int] = rest_field(readonly=True)
    """A timestamp when this job or item was created (in unix epochs). """
    updated_at: Optional[int] = rest_field(readonly=True)
    """A timestamp when this job or item was modified last (in unix epochs). """
    id: str = rest_field(readonly=True)
    """The identity of this item. Required. """
    bytes: Optional[int] = rest_field(readonly=True)
    """The size of this file when available (can be null). File sizes larger than
2^53-1 are not supported to ensure compatibility
with JavaScript integers. """
    purpose: str = rest_field()
    """The intended purpose of the uploaded documents. Use \"fine-tune\" for
fine-tuning. This allows us to validate the format of the uploaded file. Required. """
    filename: str = rest_field()
    """The name of the file. Required. """

    @overload
    def __init__(
        self,
        *,
        purpose: str,
        filename: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FileContent(_model_base.Model):
    """content of uploaded file.

    All required parameters must be populated in order to send to Azure.

    :ivar purpose: The intended purpose of the uploaded documents. Use "fine-tune" for
     fine-tuning. This allows us to validate the format of the uploaded file. Required.
    :vartype purpose: str
    :ivar file: Gets or sets the file to upload into Azure OpenAI. Required.
    :vartype file: bytes
    """

    purpose: str = rest_field()
    """The intended purpose of the uploaded documents. Use \"fine-tune\" for
fine-tuning. This allows us to validate the format of the uploaded file. Required. """
    file: bytes = rest_field()
    """Gets or sets the file to upload into Azure OpenAI. Required. """

    @overload
    def __init__(
        self,
        *,
        purpose: str,
        file: bytes,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FileImport(_model_base.Model):
    """Defines a document to import from an external content url to be usable with
    Azure OpenAI.

    All required parameters must be populated in order to send to Azure.

    :ivar purpose: The intended purpose of the uploaded documents. Use "fine-tune" for
     fine-tuning. This allows us to validate the format of the uploaded file. Required.
    :vartype purpose: str
    :ivar filename: The name of the `JSON Lines <https://jsonlines.readthedocs.io/en/latest/>`_
     file
     to be uploaded.
     If the ``purpose`` is set to "fine-tune", each line is a JSON
     record with "prompt" and "completion" fields representing your training
     examples. Required.
    :vartype filename: str
    :ivar content_url: The url to download the document from (can be SAS url of a blob or any other
     external url accessible with a GET request). Required.
    :vartype content_url: str
    """

    purpose: str = rest_field()
    """The intended purpose of the uploaded documents. Use \"fine-tune\" for
fine-tuning. This allows us to validate the format of the uploaded file. Required. """
    filename: str = rest_field()
    """The name of the `JSON Lines <https://jsonlines.readthedocs.io/en/latest/>`_ file
to be uploaded.
If the ``purpose`` is set to \"fine-tune\", each line is a JSON
record with \"prompt\" and \"completion\" fields representing your training
examples. Required. """
    content_url: str = rest_field()
    """The url to download the document from (can be SAS url of a blob or any other
external url accessible with a GET request). Required. """

    @overload
    def __init__(
        self,
        *,
        purpose: str,
        filename: str,
        content_url: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FileList(_model_base.Model):
    """FileList.

    :ivar object: Defines the type of this object. Default value is "file".
    :vartype object: str
    :ivar data: The list of Files.
    :vartype data: list[~azure.openai.python.models.File]
    """

    object: Optional[Literal["file"]] = rest_field()
    """Defines the type of this object. Default value is \"file\"."""
    data: Optional[List["_models.File"]] = rest_field()
    """The list of Files. """

    @overload
    def __init__(
        self,
        *,
        object: Optional[Literal["file"]] = None,
        data: Optional[List["_models.File"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FineTune(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Fine tuning is a job to tailor a model to specific training data.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar object: Defines the type of an object.
    :vartype object: str
    :ivar status: The state of a job or item. Known values are: "notRunning", "running",
     "succeeded", "canceled", "failed", and "deleted".
    :vartype status: str or ~azure.openai.python.models.State
    :ivar created_at: A timestamp when this job or item was created (in unix epochs).
    :vartype created_at: int
    :ivar updated_at: A timestamp when this job or item was modified last (in unix epochs).
    :vartype updated_at: int
    :ivar id: The identity of this item. Required.
    :vartype id: str
    :ivar model: The identifier of the base model used for the fine-tune. Required.
    :vartype model: str
    :ivar fine_tuned_model: The identifier of the resulting fine tuned model. This property is only
     populated for successfully completed fine-tune runs.
     Use this identifier to
     create a deployment for inferencing.
    :vartype fine_tuned_model: str
    :ivar training_files: The files that are used for training the fine tuned model. Required.
    :vartype training_files: list[~azure.openai.python.models.File]
    :ivar validation_files: The files that are used to evaluate the fine tuned model during
     training.
    :vartype validation_files: list[~azure.openai.python.models.File]
    :ivar result_files: The result files containing training and evaluation metrics in csv format.
     The
     file is only available for successfully completed fine-tune runs.
    :vartype result_files: list[~azure.openai.python.models.File]
    :ivar events: The events that show the progress of the fine-tune run including queued,
     running and completed.
    :vartype events: list[~azure.openai.python.models.Event]
    :ivar organisation_id: The organisation id of this fine tune job. Unused on Azure OpenAI;
     compatibility for OpenAI only.
    :vartype organisation_id: str
    :ivar user_id: The user id of this fine tune job. Unused on Azure OpenAI; compatibility for
     OpenAI only.
    :vartype user_id: str
    :ivar hyperparams: The hyper parameter settings used in a fine tune job.
    :vartype hyperparams: ~azure.openai.python.models.HyperParameters
    """

    object: Optional[str] = rest_field(readonly=True)
    """Defines the type of an object. """
    status: Optional[Union[str, "_models.State"]] = rest_field(readonly=True)
    """The state of a job or item. Known values are: \"notRunning\", \"running\", \"succeeded\", \"canceled\", \"failed\", and \"deleted\"."""
    created_at: Optional[int] = rest_field(readonly=True)
    """A timestamp when this job or item was created (in unix epochs). """
    updated_at: Optional[int] = rest_field(readonly=True)
    """A timestamp when this job or item was modified last (in unix epochs). """
    id: str = rest_field(readonly=True)
    """The identity of this item. Required. """
    model: str = rest_field()
    """The identifier of the base model used for the fine-tune. Required. """
    fine_tuned_model: Optional[str] = rest_field(readonly=True)
    """The identifier of the resulting fine tuned model. This property is only
populated for successfully completed fine-tune runs.
Use this identifier to
create a deployment for inferencing. """
    training_files: List["_models.File"] = rest_field()
    """The files that are used for training the fine tuned model. Required. """
    validation_files: Optional[List["_models.File"]] = rest_field()
    """The files that are used to evaluate the fine tuned model during training. """
    result_files: Optional[List["_models.File"]] = rest_field(readonly=True)
    """The result files containing training and evaluation metrics in csv format.
The
file is only available for successfully completed fine-tune runs. """
    events: Optional[List["_models.Event"]] = rest_field(readonly=True)
    """The events that show the progress of the fine-tune run including queued,
running and completed. """
    organisation_id: Optional[str] = rest_field(readonly=True)
    """The organisation id of this fine tune job. Unused on Azure OpenAI;
compatibility for OpenAI only. """
    user_id: Optional[str] = rest_field(readonly=True)
    """The user id of this fine tune job. Unused on Azure OpenAI; compatibility for
OpenAI only. """
    hyperparams: Optional["_models.HyperParameters"] = rest_field()
    """The hyper parameter settings used in a fine tune job. """

    @overload
    def __init__(
        self,
        *,
        model: str,
        training_files: List["_models.File"],
        validation_files: Optional[List["_models.File"]] = None,
        hyperparams: Optional["_models.HyperParameters"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FineTuneCreation(_model_base.Model):
    """FineTuneCreation.

    All required parameters must be populated in order to send to Azure.

    :ivar model: The identifier of the base model used for this fine-tune. Required.
    :vartype model: str
    :ivar training_file: The file that is used for training this fine tuned model. Required.
    :vartype training_file: str
    :ivar validation_file: The file that is used to evaluate the fine tuned model during training.
    :vartype validation_file: str
    :ivar hyperparams: The hyper parameter settings used in a fine tune job.
    :vartype hyperparams: ~azure.openai.python.models.HyperParameters
    """

    model: str = rest_field()
    """The identifier of the base model used for this fine-tune. Required. """
    training_file: str = rest_field()
    """The file that is used for training this fine tuned model. Required. """
    validation_file: Optional[str] = rest_field()
    """The file that is used to evaluate the fine tuned model during training. """
    hyperparams: Optional["_models.HyperParameters"] = rest_field()
    """The hyper parameter settings used in a fine tune job. """

    @overload
    def __init__(
        self,
        *,
        model: str,
        training_file: str,
        validation_file: Optional[str] = None,
        hyperparams: Optional["_models.HyperParameters"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FineTuneList(_model_base.Model):
    """FineTuneList.

    :ivar object: Defines the type of this object. Default value is "fine-tune".
    :vartype object: str
    :ivar data: The list of FineTunes.
    :vartype data: list[~azure.openai.python.models.FineTune]
    """

    object: Optional[Literal["fine-tune"]] = rest_field()
    """Defines the type of this object. Default value is \"fine-tune\"."""
    data: Optional[List["_models.FineTune"]] = rest_field()
    """The list of FineTunes. """

    @overload
    def __init__(
        self,
        *,
        object: Optional[Literal["fine-tune"]] = None,
        data: Optional[List["_models.FineTune"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HyperParameters(_model_base.Model):
    """The hyper parameter settings used in a fine tune job.

    :ivar batch_size: The batch size to use for training. The batch size is the number of training
     examples used to train a single forward and backward pass.
     In general, we've
     found that larger batch sizes tend to work better for larger datasets.
     The
     default value as well as the maximum value for this property are specific to a
     base model.
    :vartype batch_size: int
    :ivar learning_rate_multiplier: The learning rate multiplier to use for training. The
     fine-tuning learning rate
     is the original learning rate used for pre-training multiplied by this
     value.
     Larger learning rates tend to perform better with larger batch
     sizes.
     We recommend experimenting with values in the range 0.02 to 0.2 to see
     what produces the best results.
    :vartype learning_rate_multiplier: float
    :ivar n_epochs: The number of epochs to train the model for. An epoch refers to one full cycle
     through the training dataset.
    :vartype n_epochs: int
    :ivar prompt_loss_weight: The weight to use for loss on the prompt tokens. This controls how
     much the
     model tries to learn to generate the prompt
     (as compared to the completion
     which always has a weight of 1.0), and can add a stabilizing effect to training
     when completions are short.
     If prompts are extremely long (relative to
     completions), it may make sense to reduce this weight so as to avoid
     over-prioritizing learning the prompt.
    :vartype prompt_loss_weight: float
    :ivar compute_classification_metrics: A value indicating whether to compute classification
     metrics.
     If set, we
     calculate classification-specific metrics such as accuracy and F-1 score using
     the validation set at the end of every epoch.
     These metrics can be viewed in
     the results file. In order to compute classification metrics, you must provide
     a validation_file.Additionally,
     you must specify classification_n_classes for
     multiclass classification or classification_positive_class for binary
     classification.
    :vartype compute_classification_metrics: bool
    :ivar classification_n_classes: The number of classes in a classification task.
     This parameter is required for
     multiclass classification.
    :vartype classification_n_classes: int
    :ivar classification_positive_class: The positive class in binary classification.
     This parameter is needed to
     generate precision, recall, and F1 metrics when doing binary classification.
    :vartype classification_positive_class: str
    :ivar classification_betas: The classification beta values. If this is provided, we calculate
     F-beta scores
     at the specified beta values.
     The F-beta score is a generalization of F-1
     score. This is only used for binary classification.
     With a beta of 1 (i.e.the
     F-1 score), precision and recall are given the same weight.
     A larger beta
     score puts more weight on recall and less on precision. A smaller beta score
     puts more weight on precision and less on recall.
    :vartype classification_betas: list[float]
    """

    batch_size: Optional[int] = rest_field()
    """The batch size to use for training. The batch size is the number of training
examples used to train a single forward and backward pass.
In general, we've
found that larger batch sizes tend to work better for larger datasets.
The
default value as well as the maximum value for this property are specific to a
base model. """
    learning_rate_multiplier: Optional[float] = rest_field()
    """The learning rate multiplier to use for training. The fine-tuning learning rate
is the original learning rate used for pre-training multiplied by this
value.
Larger learning rates tend to perform better with larger batch
sizes.
We recommend experimenting with values in the range 0.02 to 0.2 to see
what produces the best results. """
    n_epochs: Optional[int] = rest_field()
    """The number of epochs to train the model for. An epoch refers to one full cycle
through the training dataset. """
    prompt_loss_weight: Optional[float] = rest_field()
    """The weight to use for loss on the prompt tokens. This controls how much the
model tries to learn to generate the prompt
(as compared to the completion
which always has a weight of 1.0), and can add a stabilizing effect to training
when completions are short.
If prompts are extremely long (relative to
completions), it may make sense to reduce this weight so as to avoid
over-prioritizing learning the prompt. """
    compute_classification_metrics: Optional[bool] = rest_field()
    """A value indicating whether to compute classification metrics.
If set, we
calculate classification-specific metrics such as accuracy and F-1 score using
the validation set at the end of every epoch.
These metrics can be viewed in
the results file. In order to compute classification metrics, you must provide
a validation_file.Additionally,
you must specify classification_n_classes for
multiclass classification or classification_positive_class for binary
classification. """
    classification_n_classes: Optional[int] = rest_field()
    """The number of classes in a classification task.
This parameter is required for
multiclass classification. """
    classification_positive_class: Optional[str] = rest_field()
    """The positive class in binary classification.
This parameter is needed to
generate precision, recall, and F1 metrics when doing binary classification. """
    classification_betas: Optional[List[float]] = rest_field()
    """The classification beta values. If this is provided, we calculate F-beta scores
at the specified beta values.
The F-beta score is a generalization of F-1
score. This is only used for binary classification.
With a beta of 1 (i.e.the
F-1 score), precision and recall are given the same weight.
A larger beta
score puts more weight on recall and less on precision. A smaller beta score
puts more weight on precision and less on recall. """

    @overload
    def __init__(
        self,
        *,
        batch_size: Optional[int] = None,
        learning_rate_multiplier: Optional[float] = None,
        n_epochs: Optional[int] = None,
        prompt_loss_weight: Optional[float] = None,
        compute_classification_metrics: Optional[bool] = None,
        classification_n_classes: Optional[int] = None,
        classification_positive_class: Optional[str] = None,
        classification_betas: Optional[List[float]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ScaleSettings(_model_base.Model):
    """The scale settings of a deployment. It defines the modes for scaling and the
    reserved capacity.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ManualScaleSettings, StandardScaleSettings

    All required parameters must be populated in order to send to Azure.

    :ivar scale_type: Required. Default value is None.
    :vartype scale_type: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    scale_type: Literal[None] = rest_discriminator(name="scale_type")
    """Required. Default value is None."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.scale_type: Literal[None] = None


class ManualScaleSettings(ScaleSettings, discriminator="manual"):
    """Settings for the manual scale type.

    All required parameters must be populated in order to send to Azure.

    :ivar capacity: The constant reserved capacity of the inference endpoint for this deployment.
     Required.
    :vartype capacity: int
    :ivar scale_type: Defines how scaling operations will be executed. Required. Default value is
     "manual".
    :vartype scale_type: str
    """

    capacity: int = rest_field()
    """The constant reserved capacity of the inference endpoint for this deployment. Required. """
    scale_type: Literal["manual"] = rest_discriminator(name="scale_type")  # type: ignore
    """Defines how scaling operations will be executed. Required. Default value is \"manual\"."""

    @overload
    def __init__(
        self,
        *,
        capacity: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.scale_type: Literal["manual"] = "manual"


class Model(_model_base.Model):
    """A model is either a base model or the result of a successful fine tune job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar object: Defines the type of an object.
    :vartype object: str
    :ivar status: The state of a job or item. Known values are: "notRunning", "running",
     "succeeded", "canceled", "failed", and "deleted".
    :vartype status: str or ~azure.openai.python.models.State
    :ivar created_at: A timestamp when this job or item was created (in unix epochs).
    :vartype created_at: int
    :ivar updated_at: A timestamp when this job or item was modified last (in unix epochs).
    :vartype updated_at: int
    :ivar id: The identity of this item. Required.
    :vartype id: str
    :ivar model: The base model ID if this is a fine tune model; otherwise ``null``.
    :vartype model: str
    :ivar fine_tune: The fine tune job ID if this is a fine tune model; otherwise ``null``.
    :vartype fine_tune: str
    :ivar capabilities: The capabilities of a base or fine tune model.
    :vartype capabilities: ~azure.openai.python.models.Capabilities
    :ivar deprecation: Defines the dates of deprecation for the different use cases of a
     model.
     Usually base models support 1 year of fine tuning after creation.
     Inference is typically supported 2 years after creation of base or
     fine tuned
     models. The exact dates are specified in the properties.
    :vartype deprecation: ~azure.openai.python.models.Deprecation
    """

    object: Optional[str] = rest_field(readonly=True)
    """Defines the type of an object. """
    status: Optional[Union[str, "_models.State"]] = rest_field(readonly=True)
    """The state of a job or item. Known values are: \"notRunning\", \"running\", \"succeeded\", \"canceled\", \"failed\", and \"deleted\"."""
    created_at: Optional[int] = rest_field(readonly=True)
    """A timestamp when this job or item was created (in unix epochs). """
    updated_at: Optional[int] = rest_field(readonly=True)
    """A timestamp when this job or item was modified last (in unix epochs). """
    id: str = rest_field(readonly=True)
    """The identity of this item. Required. """
    model: Optional[str] = rest_field(readonly=True)
    """The base model ID if this is a fine tune model; otherwise ``null``. """
    fine_tune: Optional[str] = rest_field(readonly=True)
    """The fine tune job ID if this is a fine tune model; otherwise ``null``. """
    capabilities: Optional["_models.Capabilities"] = rest_field()
    """The capabilities of a base or fine tune model. """
    deprecation: Optional["_models.Deprecation"] = rest_field()
    """Defines the dates of deprecation for the different use cases of a
model.
Usually base models support 1 year of fine tuning after creation.
Inference is typically supported 2 years after creation of base or
fine tuned
models. The exact dates are specified in the properties. """

    @overload
    def __init__(
        self,
        *,
        capabilities: Optional["_models.Capabilities"] = None,
        deprecation: Optional["_models.Deprecation"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ModelList(_model_base.Model):
    """ModelList.

    :ivar object: Defines the type of this object. Default value is "model".
    :vartype object: str
    :ivar data: The list of Models.
    :vartype data: list[~azure.openai.python.models.Model]
    """

    object: Optional[Literal["model"]] = rest_field()
    """Defines the type of this object. Default value is \"model\"."""
    data: Optional[List["_models.Model"]] = rest_field()
    """The list of Models. """

    @overload
    def __init__(
        self,
        *,
        object: Optional[Literal["model"]] = None,
        data: Optional[List["_models.Model"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StandardScaleSettings(ScaleSettings, discriminator="standard"):
    """Settings for the standard scale type.

    All required parameters must be populated in order to send to Azure.

    :ivar scale_type: Defines how scaling operations will be executed. Required. Default value is
     "standard".
    :vartype scale_type: str
    """

    scale_type: Literal["standard"] = rest_discriminator(name="scale_type")  # type: ignore
    """Defines how scaling operations will be executed. Required. Default value is \"standard\"."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.scale_type: Literal["standard"] = "standard"
